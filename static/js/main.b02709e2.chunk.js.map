{"version":3,"sources":["editors/Editor.jsx","App.js","reportWebVitals.js","index.js"],"names":["require","Editor","props","language","displayName","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lineNumbers","mode","theme","App","useState","html","sethtml","js","setjs","css","setcss","srcDoc","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAUAA,EAAQ,GACRA,EAAQ,GAkCOC,MAhCf,SAAgBC,GACZ,IACIC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAMJ,OACI,sBAAKC,UAAY,mBAAjB,UACI,sBAAKA,UAAU,eAAf,UACKH,EACD,4CAEJ,cAAC,aAAD,CACII,eAVZ,SAAsBC,EAAOC,EAAKL,GAC9BC,EAASD,IAUDA,MAASA,EACTE,UAAY,qBACZI,QAAW,CACPC,cAAa,EACbC,aAAY,EACZC,KAAKX,EACLY,MAAM,kBCaXC,MAhDf,WACE,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAmBF,mBAAS,IAA5B,mBAAOG,EAAP,KAAUC,EAAV,KACA,EAAqBJ,mBAAS,IAA9B,mBAAOK,EAAP,KAAWC,EAAX,KAEMC,EAAM,oCAEAN,EAFA,kCAGEE,EAHF,oCAICE,EAJD,6BAOZ,OACE,gCACE,sBAAKf,UAAU,gBAAf,UACE,cAAC,EAAD,CACEJ,SAAW,MACXC,YAAc,OACdC,MAASa,EACTZ,SAAYa,IAEd,cAAC,EAAD,CACEhB,SAAW,MACXC,YAAc,MACdC,MAASiB,EACThB,SAAYiB,IAEd,cAAC,EAAD,CACEpB,SAAW,aACXC,YAAc,aACdC,MAASe,EACTd,SAAYe,OAGhB,qBAAKd,UAAU,cAAf,SACE,wBACEiB,OAAUA,EACVC,MAAQ,SACRC,QAAS,gBACTC,YAAc,IACdC,MAAQ,OACRC,OAAS,eChCJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b02709e2.chunk.js","sourcesContent":["import {Controlled as ControlledEditor} from \"react-codemirror2\";\r\n\r\n\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\n\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/javascript/javascript');\r\n\r\nfunction Editor(props){\r\n    const {\r\n        language,\r\n        displayName,\r\n        value,\r\n        onChange\r\n    } = props\r\n\r\n    function handleChange(editor,data,value){\r\n        onChange(value)\r\n    }\r\n    return(\r\n        <div className = \"editor-container\">\r\n            <div className=\"editor-title\">\r\n                {displayName}\r\n                <button>O/C</button>\r\n            </div>\r\n            <ControlledEditor\r\n                onBeforeChange = {handleChange}\r\n                value = {value}\r\n                className = \"code-mirro-options\"\r\n                options = {{\r\n                    lineWrapping:true,\r\n                    lineNumbers:true,\r\n                    mode:language,\r\n                    theme:'material',\r\n\r\n                }}\r\n           />\r\n        </div>\r\n    )\r\n}\r\nexport default Editor;","import { useState } from \"react\";\nimport Editor from \"./editors/Editor\";\n\nfunction App() {\n  const [html,sethtml] = useState('')\n  const [js,setjs] = useState('')\n  const [css,setcss] = useState('')\n\n  const srcDoc = `\n    <html>\n      <body>${html}</body>\n      <script>${js}</script>\n      <style>${css}</style>\n    </html>\n  `\n  return (\n    <div>\n      <div className=\"pane top-pane\">\n        <Editor\n          language = \"xml\"\n          displayName = \"HTML\"\n          value = {html}\n          onChange = {sethtml}\n        />\n        <Editor\n          language = \"css\"\n          displayName = \"CSS\"\n          value = {css}\n          onChange = {setcss}\n        />\n        <Editor\n          language = \"javascript\"\n          displayName = \"JAVASCRIPT\"\n          value = {js}\n          onChange = {setjs}\n        />\n      </div>\n      <div className=\"pane botton\">\n        <iframe\n          srcDoc = {srcDoc}\n          title = \"Output\"\n          sandbox =\"allow-scripts\"\n          frameBorder = \"0\"\n          width = \"100%\"\n          height = \"100%\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}